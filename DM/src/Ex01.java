
public class Ex01 {

}

//dist : 두 점 사이의 거리를 행렬 형태로 나타낸 2차원 정수 배열 
//행렬의 값을 만족하도록 수직선 위에 점을 놓는 모든 방법에 대해 점의 순서를 왼쪽부터 차례대로 2차원 배열 형태로 return
//return : 2차원 배열 
//서로 다른 두 점이 같은 위치에 놓인 경우 없음
//점 번호 : 0~
//항상 정답이 존재해야함,,,,
//정답 배열의 각행은 점의 순서가 사전순으로 빠른것부터 순서대로..
//dist 열 길이 = dist 행 길이

// ex) [[0,5,2,4,1],[5,0,3,9,6],[2,3,0,6,3],[4,9,6,0,3],[1,6,3,3,0]] 입력
// ex) [[1,2,0,4,3],[3,4,0,2,1]] 출력

/*
 두 점 사이의 거리를 행렬 형태로 나타낸 2차원 정수 배열 dist가 매개변수로 주어집니다. 
 행렬의 값을 만족하도록 수직선 위에 점을 놓는 모든 방법에 대해서 점의 순서를 왼쪽부터 
 차례대로 담아 2차원 배열 형태로 return 하도록 solution 함수를 완성해주세요.
 * */


/*
 * 제한 사항
 	2 ≤ dist의 행(세로) 길이 ≤ 100
	dist의 열(가로) 길이 = dist의 행(세로) 길이
		0 ≤ dist의 원소 ≤ 100,000,000
		i = j일 때, dist[i][j] = 0
		i ≠ j일 때, dist[i][j] > 0
		즉, 서로 다른 두 점이 같은 위치에 놓인 경우는 없습니다.
	점의 번호는 0부터 (dist의 행(세로) 길이 - 1)까지입니다.
	정답 배열의 각 행은 점의 순서가 사전 순으로 빠른 것부터 순서대로 담아야 합니다.
	항상 정답이 존재하는 경우만 입력으로 주어집니다. 
 * */

/*
 class Solution {
    public int[][] solution(int[][] dist) {
        int[][] answer = {};
        return answer;
    }
}
 */